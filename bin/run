#!/usr/bin/env bash

PROJECT_PATH="$(cd "$(dirname "$0")/.."; pwd)"

print_usage() {
    echo "Usage:"
    echo "  run clear containers"
    echo "  run clear images"
    echo "  run clear volume"
    echo "  run composer <command>"
    echo "  run mysql"
    echo "  run build <major version>.<minor version>-<package revision>"
    echo ""
}

clear() {
    docker-compose down
    case "$1" in
        'containers')
            docker rm $(docker ps -a -q)
        ;;

        'images')
            docker rmi $(docker images -q)
        ;;

        'volumes')
            docker volume rm $(docker volume ls | awk '$2 != "VOLUME" {print $2;}')
        ;;

        *)
            print_usage
        ;;
    esac
}

seed() {
    if [ -f ${PROJECT_PATH}/data/db.sql ]
    then
        echo "Seeding db"
        sed -E 's/(www\.)?app.com/app.local/g' ${PROJECT_PATH}/data/db.sql > ${PROJECT_PATH}/data/db1.sql
        docker exec -i \
                app-mysql \
                mysql -udocker -pdocker app < ${PROJECT_PATH}/data/db1.sql
        rm -rf ${PROJECT_PATH}/data/db1.sql
    else
        echo "not found: ${PROJECT_PATH}/data/db.sql"
    fi

    if [ -f ${PROJECT_PATH}/data/images.tar.gz ]
    then
        echo "Adding images"
        rm -rf ${PROJECT_PATH}/uploads/
        mkdir ${PROJECT_PATH}/uploads/
        tar -C ${PROJECT_PATH}/uploads/ -xzf ${PROJECT_PATH}/data/images.tar.gz
    else
        echo "not found : ${PROJECT_PATH}/data/images.tar.gz"
    fi

    echo "Create .env"
    cp ${PROJECT_PATH}/.env.dev ${PROJECT_PATH}/.env
    echo "Done"
}

case "$1" in
    'clear')
        clear $2
    ;;

    'composer')
        docker exec -ti \
                    app-php \
                    composer "${@:2}"
    ;;

    'mysql')
        docker exec -ti \
                    app-mysql \
                    mysql "${@:2}"
    ;;

    'php')
        docker exec -ti \
                    app-php \
                    php "${@:2}"
    ;;

    'build')
        docker run --name builder -v ${PROJECT_PATH}:/source:rw app_builder:latest make version="${@:2}" env=production
        docker rm builder
        echo Build finished
    ;;

    '--help')
        echo "Run tools from docker containers."
        echo
        print_usage
    ;;

    *)
        echo "Invalid command: $1"
        echo
        print_usage
        exit 1
    ;;
esac